name: CI/CD Pipeline

on:
  pull_request:
    branches: [ '*' ]

env:
  NODE_VERSION: '22'

jobs:
  # Job 1: Linting and Type Checking
  lint:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:all

      - name: 🏷️ Run TypeScript type checking
        run: npm run type-check

  # Job 2: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:run

      - name: 📊 Generate coverage report
        run: npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 💾 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 3: E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    container:
      image: mcr.microsoft.com/playwright:v1.54.2-jammy
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      # Playwright container already includes browsers and system dependencies.

      - name: 🏗️ Build, start server and run E2E tests
        env:
          CI: true
        run: |
          npm run build
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 120000
          echo "🔍 Playwright version:"
          npx playwright --version
          npm run test:e2e

      - name: 📸 Upload test artifacts on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Job 4: Build Verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build production bundle
        run: npm run build

      - name: 📏 Check bundle size
        run: |
          echo "📦 Build completed successfully!"
          echo "📁 Dist folder contents:"
          ls -la dist/
          echo "📊 Bundle sizes:"
          du -sh dist/*

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job 5: Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=moderate
          echo "✅ Security audit completed"

      - name: 🔍 Run dependency check
        run: |
          echo "📦 Checking dependency tree..."
          npm ls --depth=0 || echo "⚠️ Some dependency issues detected, but continuing..."
          echo "📊 Package count:"
          npm ls --depth=0 --json | jq '.dependencies | length' || echo "Dependencies checked"

  # Job 6: Complete CI Status
  ci-complete:
    name: ✅ CI Pipeline Complete
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests, build, security]
    if: always()
    
    steps:
      - name: 🎉 All jobs completed
        run: |
          echo "🎯 CI Pipeline Results:"
          echo "✅ Linting: ${{ needs.lint.result }}"
          echo "🧪 Unit Tests: ${{ needs.unit-tests.result }}"
          echo "🎭 E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          
      - name: ❌ Fail if any job failed
        if: ${{ needs.lint.result != 'success' || needs.unit-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.build.result != 'success' || needs.security.result != 'success' }}
        run: |
          echo "💥 CI Pipeline failed! Check individual jobs for details."
          exit 1
          
      - name: 🎊 Success notification
        if: ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "🚀 Ready for deployment!"
