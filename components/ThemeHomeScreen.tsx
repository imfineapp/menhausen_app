// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ö—É–∫–∏ –∏ SVG –ø—É—Ç–∏
import React from 'react';
import { BottomFixedButton } from './BottomFixedButton';
import { MiniStripeLogo } from './ProfileLayoutComponents';
import { useContent } from './ContentContext';
import { StripedProgressBar } from './ui/StripedProgressBar';
import { ThemeCardManager, CardCompletionStatus } from '../utils/ThemeCardManager';

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface ThemeHomeScreenProps {
  onBack: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
  onCardClick: (cardId: string) => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
  onOpenNextLevel: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  themeTitle?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  completedCards?: Set<string>; // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  cardCompletionCounts?: Record<string, number>; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
}

// –¢–∏–ø—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
interface Card {
  id: string;
  title: string;
  level: string;
  description: string;
  attempts: number;
  isActive: boolean;
  isLocked: boolean;
  completionStatus: CardCompletionStatus;
}

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤–µ—Ç–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ–Ω–∞
 */
function Light() {
  return (
    <div
      className="absolute h-[100px] sm:h-[120px] md:h-[130px] top-[-50px] sm:top-[-60px] md:top-[-65px] translate-x-[-50%] w-[140px] sm:w-[165px] md:w-[185px] overflow-hidden"
      data-name="Light"
      style={{ left: "calc(50% + 1px)" }}
    >
      <div className="absolute inset-[-196.15%_-137.84%]">
        <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 695 640">
          <g id="Light">
            <g filter="url(#filter0_f_13_381)" id="Ellipse 2">
              <ellipse cx="347.5" cy="320" fill="var(--fill-0, #999999)" fillOpacity="0.3" rx="92.5" ry="65" />
            </g>
          </g>
          <defs>
            <filter
              colorInterpolationFilters="sRGB"
              filterUnits="userSpaceOnUse"
              height="640"
              id="filter0_f_13_381"
              width="695"
              x="0"
              y="0"
            >
              <feFlood floodOpacity="0" result="BackgroundImageFix" />
              <feBlend in="SourceGraphic" in2="BackgroundImageFix" mode="normal" result="shape" />
              <feGaussianBlur result="effect1_foregroundBlur_13_381" stdDeviation="127.5" />
            </filter>
          </defs>
        </svg>
      </div>
    </div>
  );
}


/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function ProgressTheme({ themeTitle, allCardIds }: { themeTitle: string; allCardIds: string[] }) {
  const { content, getLocalizedText } = useContent();
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º—ã
  const completedCards = allCardIds.filter(cardId => 
    ThemeCardManager.getCardCompletionStatus(cardId) === CardCompletionStatus.COMPLETED
  ).length;
  
  const totalCards = allCardIds.length;
  const progressPercentage = totalCards > 0 ? Math.round((completedCards / totalCards) * 100) : 0;
  
  return (
    <div className="h-6 relative shrink-0 w-full max-w-[351px]" data-name="Progress_theme">
      <StripedProgressBar 
        progress={progressPercentage}
        size="lg" 
        className="w-full"
        showBackground={true}
      />
      <div className="absolute inset-[12.5%_4.56%_20.83%_4.56%] text-[#696969] text-right">
        <p className="typography-caption block">{getLocalizedText(content.ui.themes.home.progress)}</p>
      </div>
    </div>
  );
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
 */
function CompletionCelebration({ isVisible, onComplete }: { isVisible: boolean; onComplete: () => void }) {
  React.useEffect(() => {
    if (isVisible) {
      const timer = setTimeout(() => {
        onComplete();
      }, 3000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
      return () => clearTimeout(timer);
    }
  }, [isVisible, onComplete]);

  if (!isVisible) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
      <div className="bg-[#22c55e] text-white p-8 rounded-2xl text-center animate-bounce">
        <div className="text-6xl mb-4">üéâ</div>
        <h2 className="text-2xl font-bold mb-2">Card Completed!</h2>
        <p className="text-lg">Great job! You're making progress!</p>
      </div>
    </div>
  );
}

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
 */
function AttemptsIcon() {
  return (
    <div className="relative shrink-0 size-6" data-name="Checkin icon">
      <svg className="block size-full" fill="none" preserveAspectRatio="none" viewBox="0 0 24 24">
        <g id="Checkin icon">
          <path
            d="M11 18H3"
            id="Vector"
            stroke="var(--stroke-0, #E1FF00)"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
          />
          <path
            d="M15 18L17 20L21 16"
            id="Vector_2"
            stroke="var(--stroke-0, #E1FF00)"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
          />
          <path
            d="M16 12H3"
            id="Vector_3"
            stroke="var(--stroke-0, #E1FF00)"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
          />
          <path
            d="M16 6H3"
            id="Vector_4"
            stroke="var(--stroke-0, #E1FF00)"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
          />
        </g>
      </svg>
    </div>
  );
}

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–º—ã —Å min-h-[44px] min-w-[44px] –¥–∏–∑–∞–π–Ω–æ–º
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 */
function ThemeCard({ card, onClick }: { card: Card; onClick: (cardId: string) => void }) {
  const { content: _content } = useContent();
  const isLocked = card.isLocked;
  const isCompleted = card.completionStatus === CardCompletionStatus.COMPLETED;
  const isInProgress = card.completionStatus === CardCompletionStatus.IN_PROGRESS;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const getCardStyles = () => {
    if (isLocked) {
      return "bg-[rgba(217,217,217,0.02)] cursor-not-allowed opacity-50 hover:opacity-60 transition-all duration-300";
    }
    if (isCompleted) {
      return "bg-[rgba(34,197,94,0.1)] cursor-pointer hover:bg-[rgba(34,197,94,0.2)] active:scale-95 border-green-500/20 hover:shadow-lg hover:shadow-green-500/20 transition-all duration-300";
    }
    if (isInProgress) {
      return "bg-[rgba(255,193,7,0.1)] cursor-pointer hover:bg-[rgba(255,193,7,0.15)] active:scale-95 border-yellow-500/20 hover:shadow-lg hover:shadow-yellow-500/20 transition-all duration-300";
    }
    return "bg-[rgba(217,217,217,0.04)] cursor-pointer hover:bg-[rgba(217,217,217,0.08)] active:scale-95 hover:shadow-lg transition-all duration-300";
  };

  const getTitleStyles = () => {
    if (isLocked) return "text-[#696969]";
    if (isCompleted) return "text-[#22c55e]";
    if (isInProgress) return "text-[#fbbf24]"; // Amber color for in-progress
    return "text-[#e1ff00]";
  };

  const getDescriptionStyles = () => {
    if (isLocked) return "text-[#696969]";
    if (isCompleted) return "text-[#ffffff]";
    return "text-[#ffffff]";
  };

  const getLevelStyles = () => {
    if (isLocked) return "text-[#696969]";
    return "text-[#696969]";
  };
  
  return (
    <button
      onClick={() => !isLocked && onClick(card.id)}
      disabled={isLocked}
      className={`${getCardStyles()} h-[106px] relative rounded-xl shrink-0 w-full transition-all duration-200 min-h-[44px] min-w-[44px]`}
      data-name="Card_item"
    >
      <div
        aria-hidden="true"
        className={`absolute border border-solid inset-0 pointer-events-none rounded-xl ${
          isLocked ? "border-[#505050]" : 
          isCompleted ? "border-[#22c55e]/30" : 
          "border-[#505050]"
        }`}
      />
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      {isCompleted && (
        <div className="absolute top-2 right-2 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center animate-pulse">
          <svg className="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
        </div>
      )}
      
      {isInProgress && (
        <div className="absolute top-2 right-2 w-4 h-4 bg-amber-500 rounded-full flex items-center justify-center animate-pulse">
          <svg className="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
          </svg>
        </div>
      )}
      
      {isLocked && (
        <div className="absolute top-2 right-2 w-4 h-4 bg-gray-500 rounded-full flex items-center justify-center">
          <svg className="w-2.5 h-2.5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
          </svg>
        </div>
      )}

      <div className="relative size-full">
        <div className="box-border content-stretch flex flex-col gap-2.5 h-[106px] items-start justify-start p-[15px] relative w-full text-left">
          <div className="box-border content-stretch flex flex-row items-center justify-between p-0 relative shrink-0 w-full">
            <div className={`typography-h2 ${getTitleStyles()} text-left w-[158px]`}>
              <h2 className="block">{card.title}</h2>
            </div>
            {!isLocked && (
              <div className="box-border content-stretch flex flex-row gap-2.5 items-center justify-end p-0 relative shrink-0 w-[85px]">
                <div className={`typography-h2 text-nowrap text-right ${
                  isInProgress ? 'text-[#fbbf24]' : 
                  isCompleted ? 'text-[#22c55e]' : 
                  'text-[#e1ff00]'
                }`}>
                  <h2 className="block whitespace-pre">{card.attempts}</h2>
                </div>
                <div className={`transition-colors duration-300 ${
                  isInProgress ? 'text-[#fbbf24]' : 
                  isCompleted ? 'text-[#22c55e]' : 
                  'text-[#e1ff00]'
                }`}>
                  <AttemptsIcon />
                </div>
              </div>
            )}
          </div>
          <div className={`typography-body ${getLevelStyles()} text-left w-full`}>
            <p className="block">{card.level}</p>
          </div>
          <div className={`typography-body ${getDescriptionStyles()} text-left w-full`}>
            <p className="block">{card.description}</p>
          </div>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ */}
          {isInProgress && (
            <div className="mt-2 w-full">
              <div className="h-1 bg-[rgba(255,255,255,0.1)] rounded-full overflow-hidden">
                <div 
                  className="h-full bg-[#e1ff00] transition-all duration-300 ease-out"
                  style={{ 
                    width: `${Math.min(100, (card.attempts * 20))}%` // 20% –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É, –º–∞–∫—Å–∏–º—É–º 100%
                  }}
                />
              </div>
              <p className="typography-caption text-[#696969] mt-1">
                {card.attempts} {card.attempts === 1 ? 'attempt' : 'attempts'}
              </p>
            </div>
          )}
        </div>
      </div>
    </button>
  );
}


/**
 * –ö–Ω–æ–ø–∫–∞ "Open next level" —Å–æ–≥–ª–∞—Å–Ω–æ Bottom Fixed Button —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç BottomFixedButton —Å —É–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
 */
function OpenNextLevelButton({ onClick, themeTitle, allCardIds }: { 
  onClick: () => void; 
  themeTitle: string; 
  allCardIds: string[]; 
}) {
  const { content, getLocalizedText } = useContent();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–º—ã
  const getButtonText = () => {
    const nextCardId = ThemeCardManager.getNextAvailableCard(themeTitle, allCardIds);
    const completedCards = allCardIds.filter(cardId => 
      ThemeCardManager.getCardCompletionStatus(cardId) === CardCompletionStatus.COMPLETED
    ).length;
    const totalCards = allCardIds.length;
    
    if (completedCards === totalCards) {
      return "üéâ Theme Completed!";
    } else if (nextCardId) {
      const nextCardIndex = allCardIds.indexOf(nextCardId) + 1;
      return `Start Card #${nextCardIndex}`;
    } else {
      return getLocalizedText(content.ui.themes.home.nextLevel);
    }
  };
  
  return (
    <BottomFixedButton onClick={onClick}>
      {getButtonText()}
    </BottomFixedButton>
  );
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º—ã
 * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π mobile-first –ø–æ–¥—Ö–æ–¥–∞
 */
export function ThemeHomeScreen({ onBack: _onBack, onCardClick, onOpenNextLevel, themeTitle = "Stress", completedCards: _completedCards = new Set(), cardCompletionCounts: _cardCompletionCounts = {} }: ThemeHomeScreenProps) {
  const { content, getLocalizedText, getTheme } = useContent();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const [showCelebration, setShowCelebration] = React.useState(false);
  const [lastCompletedCard, setLastCompletedCard] = React.useState<string | null>(null);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
  const themeData = themeTitle ? getTheme(themeTitle) : null;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('ThemeHomeScreen Debug:', {
    themeTitle,
    themeData,
    hasDescription: !!themeData?.description,
    description: themeData?.description,
    content: content,
    hasContent: !!content,
    hasUI: !!content?.ui,
    hasCards: !!content?.ui?.cards,
    hasThemeHome: !!content?.ui?.cards?.themeHome
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
  if (!content?.ui?.cards?.themeHome) {
    return (
      <div className="w-full h-screen flex items-center justify-center bg-[#111111]">
        <div className="text-white text-center">
          <div className="text-lg animate-pulse">Loading content...</div>
          <div className="text-sm mt-2 text-gray-400">Theme: {themeTitle}</div>
          <div className="text-xs mt-1 text-gray-500">Initializing theme cards...</div>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!content) {
    return (
      <div className="w-full h-screen flex items-center justify-center bg-[#111111]">
        <div className="text-white text-center">
          <div className="text-lg text-red-400">Error loading content</div>
          <div className="text-sm mt-2 text-gray-400">Theme: {themeTitle}</div>
          <button 
            onClick={() => window.location.reload()} 
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ç–µ–º–µ (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
  const allCardIds = [
    "card-1", "card-2", "card-3", "card-4", "card-5", 
    "card-6", "card-7", "card-8", "card-9", "card-10", "card-11"
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const getNextAvailableCard = () => {
    return ThemeCardManager.getNextAvailableCard(themeTitle, allCardIds);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ª–∂–Ω–∞ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const shouldShowWelcome = () => {
    return ThemeCardManager.shouldShowWelcomeScreen(themeTitle, allCardIds);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const migrateExistingUserData = () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      const oldDataKeys = Object.keys(localStorage).filter(key => 
        key.includes('theme') || key.includes('card') || key.includes('progress')
      );
      
      if (oldDataKeys.length > 0) {
        console.log('Found existing user data, migrating...', oldDataKeys);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ThemeCardManager
        
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        oldDataKeys.forEach(key => {
          const data = localStorage.getItem(key);
          if (data) {
            console.log(`Migrating data from ${key}:`, JSON.parse(data));
          }
        });
      }
    } catch (error) {
      console.error('Error during data migration:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const testProgressPersistence = () => {
    try {
      console.log('Testing progress persistence...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
      const testCardId = 'card-1';
      const testProgress = {
        cardId: testCardId,
        isCompleted: false,
        questionsAnswered: [],
        answers: {},
        rating: undefined,
        lastAttemptDate: new Date().toISOString().split('T')[0],
        totalAttempts: 1,
      };
      
      ThemeCardManager.saveCardProgress(testCardId, testProgress);
      const loadedProgress = ThemeCardManager.getCardProgress(testCardId);
      
      console.log('Progress persistence test:', {
        saved: testProgress,
        loaded: loadedProgress,
        match: JSON.stringify(testProgress) === JSON.stringify(loadedProgress)
      });
      
      return loadedProgress !== null;
    } catch (error) {
      console.error('Progress persistence test failed:', error);
      return false;
    }
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    migrateExistingUserData();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      testProgressPersistence();
    }
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
  React.useEffect(() => {
    const checkForNewCompletions = () => {
      allCardIds.forEach(cardId => {
        const completionStatus = ThemeCardManager.getCardCompletionStatus(cardId);
        const isCompleted = completionStatus === CardCompletionStatus.COMPLETED;
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        if (isCompleted && cardId !== lastCompletedCard) {
          setLastCompletedCard(cardId);
          setShowCelebration(true);
        }
      });
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkForNewCompletions, 2000);
    return () => clearInterval(interval);
  }, [allCardIds, lastCompletedCard]);

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  const cards: Card[] = allCardIds.map((cardId, index) => {
    try {
      const cardNumber = index + 1;
      const levelNumber = Math.ceil(cardNumber / 2); // 1-2: Level 1, 3-4: Level 2, etc.
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progress = ThemeCardManager.getCardProgress(cardId);
      const attempts = progress ? progress.totalAttempts : 0;
      const completionStatus = ThemeCardManager.getCardCompletionStatus(cardId);
      const isAvailable = ThemeCardManager.isCardAvailable(cardId, allCardIds);
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å fallback
      const titleKey = `card${cardNumber}` as keyof typeof content.ui.cards.themeHome;
      const levelKey = `level${levelNumber}` as keyof typeof content.ui.cards.themeHome;
      
      const title = content.ui.cards.themeHome[titleKey] 
        ? getLocalizedText(content.ui.cards.themeHome[titleKey])
        : getLocalizedText(content.ui.cards.themeHome.card1);
        
      const level = content.ui.cards.themeHome[levelKey]
        ? getLocalizedText(content.ui.cards.themeHome[levelKey])
        : getLocalizedText(content.ui.cards.themeHome.level1);
      
      const description = getLocalizedText(content.ui.cards.themeHome.description);
      
      return {
        id: cardId,
        title,
        level,
        description,
        attempts,
        isActive: isAvailable,
        isLocked: !isAvailable,
        completionStatus
      };
    } catch (error) {
      console.error(`Error creating card ${cardId}:`, error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–∞—Ä—Ç–æ—á–∫—É
      return {
        id: cardId,
        title: `Card ${index + 1}`,
        level: `Level ${Math.ceil((index + 1) / 2)}`,
        description: 'Card description',
        attempts: 0,
        isActive: index === 0, // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        isLocked: index !== 0,
        completionStatus: CardCompletionStatus.NOT_STARTED
      };
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const handleCardClick = (cardId: string) => {
    const card = cards.find(c => c.id === cardId);
    if (card && !card.isLocked) {
      onCardClick(cardId);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Next Level" - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  const handleNextLevelClick = () => {
    const nextCardId = getNextAvailableCard();
    if (nextCardId) {
      onCardClick(nextCardId);
    } else {
      // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      console.log('All cards completed!');
      onOpenNextLevel();
    }
  };

  return (
    <div className="w-full h-screen max-h-screen relative overflow-hidden overflow-x-hidden bg-[#111111] flex flex-col">
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è */}
      <CompletionCelebration 
        isVisible={showCelebration} 
        onComplete={() => setShowCelebration(false)} 
      />
      
      {/* –°–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      <Light />
      
      {/* –õ–æ–≥–æ—Ç–∏–ø */}
      <MiniStripeLogo />
      
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π */}
      <div className="flex-1 overflow-y-auto">
        <div className="px-[16px] sm:px-[20px] md:px-[21px] pt-[100px] pb-[200px]">
          <div className="max-w-[351px] mx-auto">
            
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="text-center mb-6">
              <h1 className="typography-h1 text-[#e1ff00] mb-4">
                {themeData ? themeData.title : themeTitle}
              </h1>
            </div>
            
            {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã */}
            <div className="mb-6">
              <p className="typography-body text-white text-center">
                {themeData?.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'}
              </p>
            </div>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º—ã */}
            <div className="mb-8">
              <ProgressTheme themeTitle={themeTitle} allCardIds={allCardIds} />
            </div>
            
            {/* –ö–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="space-y-4">
              {cards.map((card) => (
                <ThemeCard 
                  key={card.id}
                  card={card}
                  onClick={handleCardClick}
                />
              ))}
            </div>

          </div>
        </div>
      </div>

      {/* Bottom Fixed Button - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É */}
      <OpenNextLevelButton 
        onClick={handleNextLevelClick} 
        themeTitle={themeTitle}
        allCardIds={allCardIds}
      />

    </div>
  );
}