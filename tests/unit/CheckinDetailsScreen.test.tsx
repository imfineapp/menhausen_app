import React from 'react';
import { render, screen } from '@testing-library/react';
import { vi } from 'vitest';
import { CheckinDetailsScreen } from '../../components/CheckinDetailsScreen';
import { ThemeCardManager } from '../../utils/ThemeCardManager';

// Mock localStorage
const localStorageMock = (() => {
  let store: Record<string, string> = {};

  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString();
    },
    removeItem: (key: string) => {
      delete store[key];
    },
    clear: () => {
      store = {};
    }
  };
})();

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

// Mock content context
vi.mock('../../components/ContentContext', () => ({
  useContent: () => ({
    content: {
      ui: {
        cards: {
          final: {
            why: 'Why?'
          },
          startExercise: 'Ready to start the exercise?'
        },
        navigation: {
          continue: 'Continue'
        }
      }
    },
    getLocalizedText: (text: string) => text,
    getCard: (cardId: string) => ({
      id: cardId,
      title: 'Test Card',
      questions: [
        { text: 'Question 1' },
        { text: 'Question 2' }
      ],
      finalMessage: {
        message: 'Test message',
        practiceTask: 'Test task',
        whyExplanation: 'Test explanation'
      }
    })
  })
}));

// Mock components
vi.mock('../../components/BottomFixedButton', () => ({
  BottomFixedButton: ({ children, onClick }: { children: React.ReactNode; onClick: () => void }) => (
    <button onClick={onClick} data-testid="continue-button">
      {children}
    </button>
  )
}));

vi.mock('../../components/ProfileLayoutComponents', () => ({
  MiniStripeLogo: () => <div data-testid="mini-logo">Logo</div>
}));

describe('CheckinDetailsScreen', () => {
  beforeEach(() => {
    localStorageMock.clear();
  });

  const mockProps = {
    onBack: vi.fn(),
    checkinId: 'card-1_2024-01-15_1',
    cardTitle: 'Test Card',
    checkinDate: '2024-01-15'
  };

  it('should display start exercise invitation when no completed attempts exist', () => {
    // No completed attempts added
    render(<CheckinDetailsScreen {...mockProps} />);

    // Should show start exercise invitation
    expect(screen.getByText('Ready to start the exercise?')).toBeInTheDocument();
  });

  it('should display completed attempt data when attempt exists', () => {
    // Add a completed attempt
    const answers = { 'question-1': 'My answer to question 1', 'question-2': 'My answer to question 2' };
    const updatedProgress = ThemeCardManager.addCompletedAttempt('card-1', answers, 4);
    const attemptId = updatedProgress.completedAttempts[0].attemptId;

    // Use the actual attemptId generated by ThemeCardManager
    const propsWithRealAttemptId = {
      ...mockProps,
      checkinId: attemptId
    };

    render(<CheckinDetailsScreen {...propsWithRealAttemptId} />);

    // Should show the completed attempt data
    expect(screen.getByText('My answer to question 1')).toBeInTheDocument();
    expect(screen.getByText('My answer to question 2')).toBeInTheDocument();
    expect(screen.getByText('Test message')).toBeInTheDocument();
    expect(screen.getByText('Test task')).toBeInTheDocument();
  });

  it('should call onBack when continue button is clicked', () => {
    render(<CheckinDetailsScreen {...mockProps} />);

    const continueButton = screen.getByTestId('continue-button');
    continueButton.click();

    expect(mockProps.onBack).toHaveBeenCalledTimes(1);
  });

  it('should display card title in header', () => {
    render(<CheckinDetailsScreen {...mockProps} />);

    // Should show card title in header (text is split across elements)
    expect(screen.getByText(/Test Card/)).toBeInTheDocument();
  });
});
