/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä
 */

interface CSVRow {
  id: string;
  titleRu: string;
  titleEn: string;
  descriptionRu: string;
  descriptionEn: string;
  xp: number;
  iconName: string;
  conditionType: string;
  category: string;
}

interface ParsedAchievement {
  id: string;
  title: string;
  titleEn: string;
  description: string;
  descriptionEn: string;
  xp: number;
  iconName: string;
  conditionType: string | string[];
  category: string;
  conditionValue?: number;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
 */
function parseCSVLine(line: string): CSVRow | null {
  const columns: string[] = [];
  let current = '';
  let insideQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      insideQuotes = !insideQuotes;
    } else if (char === ',' && !insideQuotes) {
      columns.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  columns.push(current.trim()); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
  
  if (columns.length < 10) {
    return null;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–Ω–æ–º–µ—Ä), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  const [, id, titleRu, titleEn, descriptionRu, descriptionEn, xpStr, iconName, conditionType, category] = columns;
  
  const xp = parseInt(xpStr, 10) || 0;
  
  return {
    id: id.trim(),
    titleRu: titleRu.trim(),
    titleEn: titleEn.trim(),
    descriptionRu: descriptionRu.trim(),
    descriptionEn: descriptionEn.trim(),
    xp,
    iconName: iconName.trim(),
    conditionType: conditionType.trim(),
    category: category.trim()
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —É—Å–ª–æ–≤–∏—è
 */
function extractConditionValue(conditionType: string, description: string): number | undefined {
  // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è
  const numberMatch = description.match(/(\d+)/);
  if (numberMatch) {
    return parseInt(numberMatch[1], 10);
  }
  
  // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ —É—Å–ª–æ–≤–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (conditionType.includes('registration_checkin')) {
    return 1;
  }
  
  return undefined;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª–∞
 */
export function parseAchievementsCSV(csvContent: string): ParsedAchievement[] {
  const lines = csvContent.split('\n').filter(line => line.trim());
  const achievements: ParsedAchievement[] = [];
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  for (let i = 1; i < lines.length; i++) {
    const row = parseCSVLine(lines[i]);
    if (!row || !row.id) continue;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    const conditionTypes = row.conditionType.includes('+')
      ? row.conditionType.split('+').map(c => c.trim())
      : row.conditionType;
    
    const conditionValue = extractConditionValue(
      typeof conditionTypes === 'string' ? conditionTypes : conditionTypes[0],
      row.descriptionEn
    );
    
    achievements.push({
      id: row.id,
      title: row.titleRu,
      titleEn: row.titleEn,
      description: row.descriptionRu,
      descriptionEn: row.descriptionEn,
      xp: row.xp,
      iconName: row.iconName,
      conditionType: conditionTypes,
      category: row.category,
      conditionValue
    });
  }
  
  return achievements;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è RU badges.json
 */
export function generateRuBadgesJSON(achievements: ParsedAchievement[]): any {
  const achievementsObj: Record<string, any> = {};
  
  achievements.forEach(achievement => {
    achievementsObj[achievement.id] = {
      title: achievement.title,
      description: achievement.description
    };
  });
  
  return {
    title: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    subtitle: "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–±–æ—Ç–µ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ",
    congratulations: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
    unlockedBadge: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
    shareButton: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    shareMessage: "–Ø –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ Menhausen! üéâ",
    shareDescription: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–±–æ—Ç–µ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ",
    appLink: "https://t.me/menhausen_bot/app",
    lockedBadge: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    unlockCondition: "–£—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
    progress: "–ü—Ä–æ–≥—Ä–µ—Å—Å",
    totalBadges: "–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
    unlockedCount: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    inProgress: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    points: "–æ—á–∫–∏",
    motivatingText: "–í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–º–æ–≥–ª–∞ –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    motivatingTextNoBadges: "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞.",
    received: "–ü–æ–ª—É—á–µ–Ω–æ",
    locked: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    cancel: "–û—Ç–º–µ–Ω–∞",
    unlocked: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    reward: {
      title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
      subtitle: "–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
      continueButton: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
      nextAchievement: "–°–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
      congratulations: "–û—Ç–ª–∏—á–Ω–æ!",
      earnedAchievement: "–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
    },
    achievements: achievementsObj
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è EN badges.json
 */
export function generateEnBadgesJSON(achievements: ParsedAchievement[]): any {
  const achievementsObj: Record<string, any> = {};
  
  achievements.forEach(achievement => {
    achievementsObj[achievement.id] = {
      title: achievement.titleEn,
      description: achievement.descriptionEn
    };
  });
  
  return {
    title: "Achievements",
    subtitle: "Your mental health progress",
    congratulations: "Congratulations!",
    unlockedBadge: "You unlocked a new achievement!",
    shareButton: "Share",
    shareMessage: "I got a new achievement in Menhausen! üéâ",
    shareDescription: "Join me in caring for mental health",
    appLink: "https://t.me/menhausen_bot/app",
    lockedBadge: "Locked",
    unlockCondition: "Unlock condition:",
    progress: "Progress",
    totalBadges: "Total achievements",
    unlockedCount: "Unlocked",
    inProgress: "In Progress",
    points: "points",
    motivatingText: "Your dedication helped you get a new achievement! Keep up the great work!",
    motivatingTextNoBadges: "Start your journey to mental well-being. Every day is a new opportunity for growth.",
    received: "Received",
    locked: "Locked",
    cancel: "Cancel",
    unlocked: "Unlocked",
    reward: {
      title: "Congratulations!",
      subtitle: "You earned an achievement!",
      continueButton: "Continue",
      nextAchievement: "Next Achievement",
      congratulations: "Great!",
      earnedAchievement: "You earned an achievement"
    },
    achievements: achievementsObj
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
 */
export function generateAchievementsMetadata(achievements: ParsedAchievement[]): any {
  return achievements.map(achievement => ({
    id: achievement.id,
    xp: achievement.xp,
    iconName: achievement.iconName,
    conditionType: achievement.conditionType,
    category: achievement.category,
    conditionValue: achievement.conditionValue
  }));
}

