/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ badges.json –∏–∑ CSV
 * –ó–∞–ø—É—Å–∫: node scripts/generateBadges.js
 */

const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–æ–π CSV –ø–∞—Ä—Å–µ—Ä
function parseCSVLine(line) {
  const columns = [];
  let current = '';
  let insideQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      insideQuotes = !insideQuotes;
    } else if (char === ',' && !insideQuotes) {
      columns.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  columns.push(current.trim());
  
  return columns;
}

function extractConditionValue(conditionType, description) {
  const numberMatch = description.match(/(\d+)/);
  if (numberMatch) {
    return parseInt(numberMatch[1], 10);
  }
  if (conditionType.includes('registration_checkin')) {
    return 1;
  }
  return undefined;
}

function parseCSV(csvContent) {
  const lines = csvContent.split('\n').filter(line => line.trim());
  const achievements = [];
  
  for (let i = 1; i < lines.length; i++) {
    const columns = parseCSVLine(lines[i]);
    if (columns.length < 10) continue;
    
    const [, id, titleRu, titleEn, descriptionRu, descriptionEn, xpStr, iconName, conditionType, category] = columns;
    
    if (!id || !id.trim()) continue;
    
    const xp = parseInt(xpStr, 10) || 0;
    const conditionTypes = conditionType.includes('+')
      ? conditionType.split('+').map(c => c.trim())
      : conditionType.trim();
    
    const conditionValue = extractConditionValue(
      typeof conditionTypes === 'string' ? conditionTypes : conditionTypes[0],
      descriptionEn
    );
    
    achievements.push({
      id: id.trim(),
      titleRu: titleRu.trim(),
      titleEn: titleEn.trim(),
      descriptionRu: descriptionRu.trim(),
      descriptionEn: descriptionEn.trim(),
      xp,
      iconName: iconName.trim(),
      conditionType: conditionTypes,
      category: category.trim(),
      conditionValue
    });
  }
  
  return achievements;
}

function generateRuJSON(achievements) {
  const achievementsObj = {};
  
  achievements.forEach(achievement => {
    achievementsObj[achievement.id] = {
      title: achievement.titleRu,
      description: achievement.descriptionRu
    };
  });
  
  return {
    title: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
    subtitle: "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–±–æ—Ç–µ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ",
    congratulations: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
    unlockedBadge: "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
    shareButton: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
    shareMessage: "–Ø –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ Menhausen! üéâ",
    shareDescription: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–±–æ—Ç–µ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ",
    appLink: "https://t.me/menhausen_bot/app",
    lockedBadge: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    unlockCondition: "–£—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
    progress: "–ü—Ä–æ–≥—Ä–µ—Å—Å",
    totalBadges: "–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
    unlockedCount: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    inProgress: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
    points: "–æ—á–∫–∏",
    motivatingText: "–í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–º–æ–≥–ª–∞ –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    motivatingTextNoBadges: "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞.",
    received: "–ü–æ–ª—É—á–µ–Ω–æ",
    locked: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    cancel: "–û—Ç–º–µ–Ω–∞",
    unlocked: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    reward: {
      title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
      subtitle: "–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
      continueButton: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
      nextAchievement: "–°–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
      congratulations: "–û—Ç–ª–∏—á–Ω–æ!",
      earnedAchievement: "–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
    },
    achievements: achievementsObj
  };
}

function generateEnJSON(achievements) {
  const achievementsObj = {};
  
  achievements.forEach(achievement => {
    achievementsObj[achievement.id] = {
      title: achievement.titleEn,
      description: achievement.descriptionEn
    };
  });
  
  return {
    title: "Achievements",
    subtitle: "Your mental health progress",
    congratulations: "Congratulations!",
    unlockedBadge: "You unlocked a new achievement!",
    shareButton: "Share",
    shareMessage: "I got a new achievement in Menhausen! üéâ",
    shareDescription: "Join me in caring for mental health",
    appLink: "https://t.me/menhausen_bot/app",
    lockedBadge: "Locked",
    unlockCondition: "Unlock condition:",
    progress: "Progress",
    totalBadges: "Total achievements",
    unlockedCount: "Unlocked",
    inProgress: "In Progress",
    points: "points",
    motivatingText: "Your dedication helped you get a new achievement! Keep up the great work!",
    motivatingTextNoBadges: "Start your journey to mental well-being. Every day is a new opportunity for growth.",
    received: "Received",
    locked: "Locked",
    cancel: "Cancel",
    unlocked: "Unlocked",
    reward: {
      title: "Congratulations!",
      subtitle: "You earned an achievement!",
      continueButton: "Continue",
      nextAchievement: "Next Achievement",
      congratulations: "Great!",
      earnedAchievement: "You earned an achievement"
    },
    achievements: achievementsObj
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
try {
  const csvPath = path.join(__dirname, '..', 'imports', 'Achievements.csv');
  const csvContent = fs.readFileSync(csvPath, 'utf8');
  
  const achievements = parseCSV(csvContent);
  console.log(`Parsed ${achievements.length} achievements`);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RU JSON
  const ruJSON = generateRuJSON(achievements);
  const ruPath = path.join(__dirname, '..', 'data', 'content', 'ru', 'badges.json');
  fs.writeFileSync(ruPath, JSON.stringify(ruJSON, null, 2), 'utf8');
  console.log(`Generated ${ruPath}`);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EN JSON
  const enJSON = generateEnJSON(achievements);
  const enPath = path.join(__dirname, '..', 'data', 'content', 'en', 'badges.json');
  fs.writeFileSync(enPath, JSON.stringify(enJSON, null, 2), 'utf8');
  console.log(`Generated ${enPath}`);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const metadata = achievements.map(a => ({
    id: a.id,
    xp: a.xp,
    iconName: a.iconName,
    conditionType: a.conditionType,
    category: a.category,
    conditionValue: a.conditionValue
  }));
  
  const metadataPath = path.join(__dirname, '..', 'data', 'achievements-metadata.json');
  fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2), 'utf8');
  console.log(`Generated ${metadataPath}`);
  
  console.log('\n‚úÖ Badges JSON files generated successfully!');
} catch (error) {
  console.error('Error generating badges:', error);
  process.exit(1);
}

